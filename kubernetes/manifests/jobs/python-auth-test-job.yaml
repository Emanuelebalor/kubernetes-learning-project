apiVersion: batch/v1
kind: Job
metadata:
  name: python-auth-test
  namespace: test-jobs
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: test
        image: alpine:latest
        env:
        - name: AUTH_SERVICE_URL
          value: "http://python-auth.microservices:8001"
        - name: TEST_USERNAME
          value: "testuser"
        - name: TEST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test-db-credentials
              key: POSTGRES_PASSWORD
        command:
        - /bin/sh
        - -c
        - |
          # Install jq for JSON parsing
          apk add --no-cache curl jq
          
          echo "=== Testing Python Auth Service ==="
          
          # Wait for service
          until curl -sf $AUTH_SERVICE_URL/health > /dev/null; do
            echo "Waiting for auth service..."
            sleep 2
          done
          
          echo "✓ Service is healthy"
          
          # Generate unique username for this test run
          UNIQUE_USER="${TEST_USERNAME}_$(date +%s)"
          
          # Test registration
          echo -e "\n1. Testing registration..."
          REGISTER_RESPONSE=$(curl -s -X POST $AUTH_SERVICE_URL/register \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$UNIQUE_USER\",\"password\":\"$TEST_PASSWORD\",\"email\":\"$UNIQUE_USER@test.com\"}")
          echo "$REGISTER_RESPONSE"
          
          # Test duplicate registration (should fail)
          echo -e "\n2. Testing duplicate registration (should fail)..."
          curl -s -X POST $AUTH_SERVICE_URL/register \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$UNIQUE_USER\",\"password\":\"$TEST_PASSWORD\",\"email\":\"$UNIQUE_USER@test.com\"}"
          
          # Test login
          echo -e "\n\n3. Testing login..."
          LOGIN_RESPONSE=$(curl -s -X POST $AUTH_SERVICE_URL/login \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$UNIQUE_USER\",\"password\":\"$TEST_PASSWORD\"}")
          
          # Extract token properly with jq
          TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.token')
          echo "Login successful, token received"
          
          # Test verify
          echo -e "\n4. Testing token verification..."
          VERIFY_RESPONSE=$(curl -s -X GET $AUTH_SERVICE_URL/verify \
            -H "Authorization: Bearer $TOKEN")
          echo "$VERIFY_RESPONSE"
          
          # Check if verification succeeded
          VALID=$(echo $VERIFY_RESPONSE | jq -r '.valid')
          if [ "$VALID" = "true" ]; then
            echo "✓ Token verification successful!"
          else
            echo "✗ Token verification failed!"
            exit 1
          fi
          
          # Test invalid token
          echo -e "\n5. Testing invalid token (should fail)..."
          curl -s -X GET $AUTH_SERVICE_URL/verify \
            -H "Authorization: Bearer invalid-token"
          
          echo -e "\n\n✓ All tests passed!"